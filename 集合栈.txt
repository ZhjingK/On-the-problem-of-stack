题目：
请实现一种数据结构SetOfStacks，由多个栈组成，其中每个栈的大小为size，当前一个栈填满时，新建一个栈。该数据结构应支持与普通栈相同的push和pop操作。
、
题目概述：
给定一个操作序列int[][2] ope(C++为vector<vector<int>>)，每个操作的第一个数代表操作类型，若为1，则为push操作，后一个数为应push的数字；若为2，则为pop操作，后一个数无意义。请返回一个int[][](C++为vector<vector<int>>)，为完成所有操作后的SetOfStacks，顺序应为从下到上，默认初始的SetOfStacks为空。保证数据合法。

解题思路：
先应该抓住一个：本题是将一维数组看作是栈，因为二维数组是一维数组的集合，可以当一维数组满的时候将一维数组压入二维数组中进行保存
//先遍历给定的二维数组，如果二位数组的第0行是1，则是push操作
当一维数组为空或者大小不等于size的时候直接将第1行数据压入一维数组中；当一维数组满的时候，将一维数组压入二维数组中后，执行清空操作后再将第1行数据压入；
//如果二维数组第0行是2，则是pop操作
当一维数组不为空的时候直接执行pop_back；
当一维数组为空时，先将二维数组中的最后一行back()赋给一维数组,同时执行pop_back操作。
//最后如果一维数组不为空，则将一维数组压入二维数组中，返回二维数组。

代码实现：
class SetOfStacks {
public:
    vector<vector<int> > setOfStacks(vector<vector<int> > ope, int size) {
        vector<vector<int>> set;
	vector<int> stack;
	if (ope.empty() || size <= 0)
	{
		return set;
	}

	for (int i = 0; i < (int)ope.size(); ++i)
	{
		if (ope[i][0] == 1)
		{
			if (stack.empty() ||(int)stack.size() < size)
			{
				stack.push_back(ope[i][1]);
			}
			else
			{
				set.push_back(stack);
				stack.clear();
				stack.push_back(ope[i][1]);
			}
		}
		else if (ope[i][0] == 2)
		{
			if (!stack.empty())
			{
				stack.pop_back();
			}
			else
			{
				stack=set.back();
				set.pop_back();
				stack.pop_back();
			}
		}
	}
	if (!stack.empty())
	{
		set.push_back(stack);
	}
       return set;
   }
};